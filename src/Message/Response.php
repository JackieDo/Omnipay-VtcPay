<?php namespace Omnipay\VtcPay\Message;

use Omnipay\Common\Message\AbstractResponse;
use Omnipay\Common\Message\RequestInterface;
use Omnipay\VtcPay\Traits\HasCheckSumTrait;

/**
 * The Response class
 *
 * @package omnipay-vtcpay
 * @author Jackie Do <anhvudo@gmail.com>
 * @copyright 2018
 * @version $Id$
 * @access public
 */
class Response extends AbstractResponse
{
    use HasCheckSumTrait;

    /**
     * Response status codes
     *
     * @var array
     */
    protected $responseCodes = [
        '0'   => 'Transaction is initialized.',
        '1'   => 'Successful transaction.',
        '7'   => 'The billing account of customer has been charged, but Merchant accounts have not yet been credited. Payment management department of VTC will approve to decide whether the transaction is successful or failed.',
        '-1'  => 'Transaction failed.',
        '-3'  => 'VTC administrator canceled the transaction.',
        '-4'  => 'Card / account not eligible for transaction (Locked, not registered for online payment ...).',
        '-5'  => 'Customer account balance (VTC Pay wallet, bank account) is not enough to make a transaction.',
        '-6'  => 'Transaction error at VTC.',
        '-7'  => 'Customer entered incorrect billing information (False account information or wrong OTP).',
        '-8'  => 'Exceeding day trading limit.',
        '-9'  => 'Customer cancels the transaction.',
        '-21' => 'Transaction code is duplicated. Possibly due to slow network, or customer press F5 key, or transaction code generation mechanism of the partner is not good, partners need to check back to know the end result of this transaction.',
        '-22' => 'Order amount is too small.',
        '-23' => 'WebsiteID does not exist.',
        '-24' => 'Payment currency is invalid.',
        '-25' => 'VTC Pay Merchant account does not exist.',
        '-28' => 'Missing required parameters in an online payment order.',
        '-29' => 'Invalid request parameter.',
        '-99' => 'Unexplained unknown error and unknown transaction status. Check to see if the transaction is successful or failed.',
    ];

    /**
     * Initialize response instance
     *
     * @param RequestInterface $request
     * @param mixed            $data
     */
    public function __construct(RequestInterface $request, $data)
    {
        $this->request = $request;

        if (!is_array($data)) {
            parse_str($data, $this->data);
        } elseif (count($data) == 2 && array_key_exists('data', $data) && array_key_exists('signature', $data)) {
            list($amount, $message, $payment_type, $reference_number, $status, $trans_ref_no, $website_id) = explode('|', $data['data']);

            $signature = $data['signature'];

            $this->data = [
                'amount'           => $amount,
                'message'          => $message,
                'payment_type'     => $payment_type,
                'reference_number' => $reference_number,
                'status'           => $status,
                'trans_ref_no'     => $trans_ref_no,
                'website_id'       => $website_id,
                'signature'        => $signature
            ];
        } else {
            $this->data = $data;
        }

        $this->setCheckSum($this->data, $this->request->getSecurityCode());
    }

    /**
     * Is the response successful?
     *
     * @return boolean
     */
    public function isSuccessful()
    {
        return $this->getCode() == '1' && $this->isHashMatch();
    }

    /**
     * Is the transaction cancelled by the user?
     *
     * @return boolean
     */
    public function isCancelled()
    {
        return $this->getCode() == '-9' && $this->isHashMatch();
    }

    /**
     * Is the response pending?
     *
     * @return boolean
     */
    public function isPending()
    {
        return $this->getCode() == '7' && $this->isHashMatch();
    }

    /**
     * Determine if secure hash response from server match with computed hash value
     *
     * @return boolean
     */
    protected function isHashMatch()
    {
        return (isset($this->data['signature']) && strtoupper($this->data['signature']) == strtoupper($this->getCheckSum()));
    }

    /**
     * Get the transaction ID as generated by the merchant website.
     *
     * @return string
     */
    public function getTransactionId()
    {
        if (isset($this->data['reference_number'])) {
            return $this->data['reference_number'];
        }

        return null;
    }

    /**
     * Gateway Reference
     *
     * @return null|string A reference provided by the gateway to represent this transaction
     */
    public function getTransactionReference()
    {
        if (isset($this->data['trans_ref_no'])) {
            return $this->data['trans_ref_no'];
        }

        return null;
    }

    /**
     * Response code
     *
     * @return null|string A response code from the payment gateway
     */
    public function getCode()
    {
        if (isset($this->data['status'])) {
            return $this->data['status'];
        }

        return null;
    }

    /**
     * Alias of the getCode() method
     *
     * @return null|string
     */
    public function getResponseCode()
    {
        return $this->getCode();
    }

    /**
     * Get message
     *
     * @return null|string Description of response code or message from server
     */
    public function getMessage()
    {
        if (isset($this->data['message']) && $this->data['message'] != '') {
            return $this->data['message'];
        }

        if (isset($this->data['status']) && $this->data['status'] != '') {
            return $this->getResponseDescription($this->data['status']);
        }

        return null;
    }

    /**
     * Get response description
     *
     * @param  string $responseCode
     *
     * @return string Desciption of response code
     */
    public function getResponseDescription($responseCode)
    {
        if (array_key_exists($responseCode, $this->responseCodes)) {
            return $this->responseCodes[$responseCode];
        }

        return 'Unable to be determined the error information. Code: ' . $responseCode;
    }
}
