<?php namespace Omnipay\VtcPay\Message;

use Omnipay\Common\Message\AbstractRequest as BaseAbstractRequest;
use Omnipay\Validator\Traits\ValidatorTrait;
use Omnipay\VtcPay\Traits\HasCheckSumTrait;
use Omnipay\VtcPay\Traits\ParamsAccessorMutatorTrait;

/**
 * The AbstractRequest class
 *
 * @package omnipay-vtcpay
 * @author Jackie Do <anhvudo@gmail.com>
 * @copyright 2018
 * @version $Id$
 * @access public
 */
abstract class AbstractRequest extends BaseAbstractRequest
{
    use HasCheckSumTrait, ParamsAccessorMutatorTrait, ValidatorTrait;

    /**
     * Endpoint URL in production
     *
     * @var string
     */
    protected $liveEndpoint = 'https://vtcpay.vn/bank-gateway/checkout.html';

    /**
     * Endpoint URL in test mode
     *
     * @var string
     */
    protected $testEndpoint = 'http://alpha1.vtcpay.vn/portalgateway/checkout.html';

    /**
     * Validates and returns the formatted amount.
     *
     * @throws InvalidRequestException on any validation failure.
     *
     * @return string The amount formatted to the correct number of decimal places for the selected currency.
     */
    public function getAmount()
    {
        $currency = $this->getCurrency();

        switch ($currency) {
            case 'VND':
                return (string) round(floatval($this->getParameter('amount')));
                break;

            case 'USD':
                return (string) round(floatval($this->getParameter('amount')), 2);
                break;

            default:
                return parent::getAmount();
                break;
        }
    }

    /**
     * Get value of the reference_number parameter
     *
     * @return string
     */
    public function getReferenceNumber()
    {
        return $this->getParameter('reference_number');
    }

    /**
     * Set value of the reference_number parameter
     *
     * @param  string $value
     *
     * @return $this
     */
    public function setReferenceNumber($value)
    {
        return $this->setParameter('reference_number', $value);
    }

    /**
     * Get the transaction ID.
     *
     * The transaction ID is the identifier generated by the merchant website.
     *
     * @return string
     */
    public function getTransactionId()
    {
        return $this->getReferenceNumber();
    }

    /**
     * Sets the transaction ID.
     *
     * @param  string $value
     *
     * @return $this
     */
    public function setTransactionId($value)
    {
        return $this->setReferenceNumber($value);
    }

    /**
     * Get value of the url_return parameter
     *
     * @return string
     */
    public function getUrlReturn()
    {
        return $this->getParameter('url_return');
    }

    /**
     * Set value of the url_return parameter
     *
     * @param  string $value
     *
     * @return $this
     */
    public function setUrlReturn($value)
    {
        return $this->setParameter('url_return', $value);
    }

    /**
     * Get the request return URL.
     *
     * @return string
     */
    public function getReturnUrl()
    {
        return $this->getUrlReturn();
    }

    /**
     * Sets the request return URL.
     *
     * @param string $value
     * @return $this
     */
    public function setReturnUrl($value)
    {
        return $this->setUrlReturn($value);
    }

    /**
     * Get value of the language parameter
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->getParameter('language');
    }

    /**
     * Set value of the language parameter
     *
     * @param  string $value
     *
     * @return $this
     */
    public function setLanguage($value)
    {
        return $this->setParameter('language', $value);
    }

    /**
     * Get value of the payment_type parameter
     *
     * @return string
     */
    public function getPaymentType()
    {
        return $this->getParameter('payment_type');
    }

    /**
     * Set value of the payment_type parameter
     *
     * @param  string $value
     *
     * @return $this
     */
    public function setPaymentType($value)
    {
        return $this->setParameter('payment_type', $value);
    }

    /**
     * Get value of the bill_to_forename parameter
     *
     * @return string
     */
    public function getBillToForename()
    {
        return $this->getParameter('bill_to_forename');
    }

    /**
     * Set value of the bill_to_forename parameter
     *
     * @param  string $value
     *
     * @return $this
     */
    public function setBillToForename($value)
    {
        return $this->setParameter('bill_to_forename', $value);
    }

    /**
     * Get value of the bill_to_surname parameter
     *
     * @return string
     */
    public function getBillToSurname()
    {
        return $this->getParameter('bill_to_surname');
    }

    /**
     * Set value of the bill_to_surname parameter
     *
     * @param  string $value
     *
     * @return $this
     */
    public function setBillToSurname($value)
    {
        return $this->setParameter('bill_to_surname', $value);
    }

    /**
     * Get value of the bill_to_address parameter
     *
     * @return string
     */
    public function getBillToAddress()
    {
        return $this->getParameter('bill_to_address');
    }

    /**
     * Set value of the bill_to_address parameter
     *
     * @param  string $value
     *
     * @return $this
     */
    public function setBillToAddress($value)
    {
        return $this->setParameter('bill_to_address', $value);
    }

    /**
     * Get value of the bill_to_address_city parameter
     *
     * @return string
     */
    public function getBillToAddressCity()
    {
        return $this->getParameter('bill_to_address_city');
    }

    /**
     * Set value of the bill_to_address_city parameter
     *
     * @param  string $value
     *
     * @return $this
     */
    public function setBillToAddressCity($value)
    {
        return $this->setParameter('bill_to_address_city', $value);
    }

    /**
     * Get value of the bill_to_email parameter
     *
     * @return string
     */
    public function getBillToEmail()
    {
        return $this->getParameter('bill_to_email');
    }

    /**
     * Set value of the bill_to_email parameter
     *
     * @param  string $value
     *
     * @return $this
     */
    public function setBillToEmail($value)
    {
        return $this->setParameter('bill_to_email', $value);
    }

    /**
     * Get value of the bill_to_phone parameter
     *
     * @return string
     */
    public function getBillToPhone()
    {
        return $this->getParameter('bill_to_phone');
    }

    /**
     * Set value of the bill_to_phone parameter
     *
     * @param  string $value
     *
     * @return $this
     */
    public function setBillToPhone($value)
    {
        return $this->setParameter('bill_to_phone', $value);
    }

    /**
     * Send the request with specified data
     *
     * @param  array  $data The data to send
     *
     * @return ResponseInterface
     */
    public function sendData($data)
    {
        return $this->response = new Response($this, $data);
    }

    /**
     * Determine URI endpoint of gateway
     *
     * @return string
     */
    public function getEndpoint()
    {
        return $this->getTestMode() ? $this->testEndpoint : $this->liveEndpoint;
    }

    /**
     * Base data
     *
     * @return array
     */
    protected function getBaseData()
    {
        $this->validateWithRules([
            'website_id'       => ['required' => true],
            'receiver_account' => ['required' => true],
        ]);

        return [
            'website_id'       => $this->getWebsiteId(),
            'receiver_account' => $this->getReceiverAccount()
        ];
    }
}
